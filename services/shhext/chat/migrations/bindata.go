// Code generated by go-bindata.
// sources:
// 1536754952_initial_schema.down.sql
// 1536754952_initial_schema.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1536754952_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4e\x2d\x2e\xce\xcc\xcf\x2b\xb6\xe6\x42\x12\x4c\x2a\xcd\x4b\xc9\x49\x45\x15\xcb\x4e\xad\x44\x15\x28\x4a\x2c\x49\xce\x48\x2d\x89\xcf\xcc\x4b\xcb\xb7\xe6\x02\x04\x00\x00\xff\xff\x72\x61\x3f\x92\x53\x00\x00\x00")

func _1536754952_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1536754952_initial_schemaDownSql,
		"1536754952_initial_schema.down.sql",
	)
}

func _1536754952_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1536754952_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1536754952_initial_schema.down.sql", size: 83, mode: os.FileMode(420), modTime: time.Unix(1536755068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1536754952_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8e\x9b\x30\x10\xbd\xe7\x2b\xe6\x98\x48\x39\xf4\xde\x13\xb0\x13\x84\x4a\xcd\xd6\x0b\x52\xf7\x64\x79\xe3\x69\xb0\x16\x1b\x64\x3b\xab\xe6\xef\x2b\x20\xa5\xb8\x65\xdb\xde\x98\xc7\x9b\x99\x37\xef\x39\xe3\x98\xd4\x08\x75\x92\x96\x08\x9e\xbc\xd7\xbd\xf5\xb0\xdf\x01\xa8\xd6\x41\x5a\x56\xe9\x71\xfa\xf6\x62\xb8\xbe\x74\xfa\x1c\x43\x4e\xbf\xc9\x40\x0b\xe6\xfa\x3e\x88\x73\x2b\xb5\x15\xaf\x74\x5b\x60\x4f\x56\xfd\x1d\xb6\x50\xb0\x1a\x73\xe4\xd3\x14\x3a\xbf\x6d\xd0\x57\x70\x44\xf7\x81\x86\x75\x3d\x58\x58\x97\x5a\x4d\x13\x80\x55\x35\xb0\xa6\x2c\xe1\x91\x17\x9f\x13\xfe\x0c\x9f\xf0\x79\xfc\xdf\xb0\xe2\x4b\x83\x7b\xad\x0e\x50\x31\xc8\x2a\x76\x2a\x8b\xac\x06\x8e\x8f\x65\x92\xe1\xee\xf0\x71\xb7\x8b\x3c\x7a\xa5\xdb\xec\xcf\xec\xc7\x22\x71\x59\x30\x0e\x35\xfe\x22\xec\xd5\xac\x75\x18\xf2\x5e\x5e\x68\x9b\x3f\x8b\x80\xfd\xbd\xef\xb8\x66\xff\xa7\xae\x97\xab\x55\x1d\xcd\xd2\xb4\x22\x1b\x74\xd8\x58\xa4\xad\x0f\xb2\xeb\x64\xd0\xbd\x15\x5a\x41\x8d\x5f\xeb\x88\x70\x8f\x34\x0e\x4a\x5f\x2c\x29\x31\xb8\x0d\xf5\x6b\x3b\x23\xa1\x45\xce\x2a\x8e\x63\x7b\xd0\x86\x7c\x90\x66\x80\x86\x3d\x15\x39\xc3\x07\x48\x8b\x7c\xf4\x26\xda\x4c\xdf\x07\xed\x48\x41\x5a\x55\x25\x26\x0c\x1e\xf0\x94\x34\x65\x0d\x1f\xfe\xbc\xd5\xc9\x70\x6e\x29\x08\x6d\xbf\xf5\xd3\xc1\xf3\xf1\xe2\xf7\xac\xa7\xb1\x43\x4b\x86\x9c\xec\xa2\x93\xde\x77\xc8\xdf\x8c\xa1\xe0\xde\x4b\xf6\x9f\x06\xde\xdf\xd3\xa2\xe8\xb8\xec\xda\x0c\x72\x6c\x39\x55\x1c\x8b\x9c\x4d\x16\xfe\x6a\x3c\x00\xc7\x13\x72\x64\x19\x3e\xfd\x4c\x77\x1f\x47\x71\x18\xad\xf9\x11\x00\x00\xff\xff\xa9\x50\xa8\xb2\xc2\x03\x00\x00")

func _1536754952_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1536754952_initial_schemaUpSql,
		"1536754952_initial_schema.up.sql",
	)
}

func _1536754952_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1536754952_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1536754952_initial_schema.up.sql", size: 962, mode: os.FileMode(420), modTime: time.Unix(1536755045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x8f\xdb\xc6\x15\x7d\x26\x7f\xc5\x44\x40\x02\xa9\x50\xb5\xfc\xfe\x10\xb0\x2f\xb1\x5d\xc0\x0f\x75\x80\xc6\x79\xea\x2d\x16\x43\x72\x46\x21\x2a\x89\x32\x49\xc5\x77\xd7\xd8\xff\x5e\x9c\xb9\xa3\xad\x9c\xc4\xde\x6d\x9b\x3e\x68\xc9\x19\xce\xdc\xcf\x73\xce\xcc\xde\xdc\xa8\x57\x43\x67\xd4\xce\x1c\xcd\xa8\x67\xd3\xa9\xe6\x5e\xed\x86\x3f\x37\xfd\xb1\xd3\xb3\xde\x84\x37\x37\x6a\x1a\xce\x63\x6b\xa6\x2d\xde\xe3\x3c\x2d\xca\x3c\xab\xf3\xe4\xae\x3f\xf6\x73\xaf\xf7\x77\x53\xfb\xb3\x39\xe8\x4d\x37\x7c\x3c\x6e\xa6\x0f\xfb\xaf\xaf\x3a\x9f\x2e\x6b\x2e\x1e\x76\x03\x46\xaf\x7f\x50\xef\x7e\x78\xaf\xde\xbc\x7e\xfb\xfe\x9b\x30\x3c\xe9\xf6\x9f\x7a\x67\xd4\xa1\xdf\x8d\x7a\xee\x87\xe3\x14\x86\xfd\xe1\x34\x8c\xb3\x5a\x86\xc1\xa2\xb9\x9f\xcd\xb4\x08\x83\x45\x3b\x1c\x4e\xa3\x99\xa6\x9b\xdd\x43\x7f\xc2\x84\x3d\xcc\x78\xf4\x83\xfc\xbd\xe9\x87\xf3\xdc\xef\x31\x18\xdc\x86\x93\x9e\x7f\xbe\xb1\xfd\xde\xe0\x05\x13\xd3\x3c\xf6\xc7\x9d\xfb\x36\xf7\x07\xb3\x08\x57\x61\x68\xcf\xc7\xf6\x12\xde\xdf\x8c\xee\x96\x78\x51\x7f\xff\x07\xdc\xae\xd5\x51\x1f\x8c\x92\x6d\x2b\xb5\xbc\xcc\x9a\x71\x1c\xc6\x95\xfa\x14\x06\xbb\x07\x37\x52\xdb\x5b\x85\xa8\x36\xef\xcc\x47\x18\x31\xe3\xd2\x85\x8d\xf1\xf7\x67\x6b\xcd\xe8\xcc\xae\x56\x61\xd0\x5b\xb7\xe1\x9b\x5b\x75\xec\xf7\x30\x11\x8c\x66\x3e\x8f\x47\x0c\xd7\xca\x1e\xe6\xcd\x1b\x58\xb7\xcb\x05\x0c\xa9\x6f\x3f\x6c\xd5\xb7\xbf\x2c\x24\x12\xe7\x6b\x15\x06\x8f\x61\x18\xfc\xa2\x47\xd5\x9c\xad\x12\x3f\xe2\x24\x0c\xee\x24\x9c\x5b\xd5\x0f\x9b\x57\xc3\xe9\x7e\xf9\x5d\x73\xb6\x6b\xb5\x7b\x58\x85\x41\xbb\x7f\x73\x89\x74\xf3\x6a\x3f\x4c\x66\xb9\x0a\xff\xa8\x78\x60\x46\xec\x7f\xc1\x90\x19\x47\x89\xdb\x4f\x36\x67\xbb\xf9\x1e\xa1\x2f\x57\x6b\xac\x08\x1f\xc3\x70\xbe\x3f\x19\xa5\xa7\xc9\xcc\x28\xf9\xb9\x9d\x61\xc5\xe5\xe7\xfb\x11\x06\xfd\xd1\x0e\x4a\x0d\xd3\xe6\x2f\xfd\xde\xbc\x3d\xda\xe1\x69\x9f\x6f\xe1\x65\xfe\xca\x82\xeb\xa1\x52\xbe\x8d\x61\x30\xf5\x0f\x6e\xdc\x1f\xe7\x22\x0b\x83\x03\x18\xa1\x9e\x8c\xfe\x75\xe8\x8c\x9b\x7c\xdf\x1f\x8c\x02\x4c\x36\x78\x83\x1f\x07\x95\xa5\xed\x7f\xed\x6b\xa5\xde\xe9\x83\x59\xae\xbc\x07\xf8\xf4\x59\xda\x7e\x03\xef\xe1\xe3\x57\xf6\xfe\xd8\x3f\x60\xaf\x8b\xe6\xf3\xad\x08\xf4\xab\x5b\x11\xeb\x72\x75\x1d\xf9\xe7\x06\x90\xda\x73\x06\x90\xdc\x72\xf5\xef\x44\x7f\x63\xc1\x67\xff\x65\x23\x6f\xa7\xd7\xfd\xb8\x5c\xa9\x66\x18\xf6\xd7\xbb\xf5\x7e\x7a\x26\xf3\xfb\x49\x12\x37\xa3\xd5\xad\xf9\xf4\x78\xb5\xdb\x43\x02\x28\xbf\xbb\xfb\xa2\xc2\xbc\x1e\x3e\x1e\x7f\xfc\xb0\x57\xb7\x1e\x20\xcb\x05\x71\x6c\x89\xab\x86\x38\xaa\x88\xa3\xe8\xf7\x7f\xd6\x12\x97\x09\x71\x54\x13\x5b\x3c\x2d\x71\x1e\xc9\x9e\x32\x26\x2e\x33\x99\xc7\x7b\x9e\x13\x27\x15\x71\x66\x88\x93\x8e\x38\x31\xc4\x2d\x7e\x2d\x71\x6b\x89\x93\x86\xb8\x29\x88\x4d\x41\x9c\x25\xc4\x71\x42\x9c\xb5\xc4\x89\x26\x6e\x3b\xe2\xac\x21\x6e\x6b\xe2\x0c\xbf\x9c\x38\xce\x89\xdb\x46\xec\x69\x7c\xcf\x64\xce\xf9\xd0\xc4\x49\x2b\x6b\xe1\x23\xab\xc4\x67\x55\x8b\x2f\xf8\x74\xf6\xe0\xb3\x14\x9f\x11\xe2\xcf\x3e\xcf\xed\x92\x5f\x11\x13\xa7\x96\xb8\x4e\x88\xf3\xf4\xba\x06\x8b\x8b\xf4\x3d\x5b\x5c\xcf\xd2\xdf\x53\xbf\x0b\x97\xaf\xd4\x33\x0c\x82\xe7\xfb\xb5\x0e\x83\x60\xf1\xfc\xe1\xb2\x58\x87\xc1\xea\x89\x78\xcf\x5a\x45\x8c\x7f\x72\xf2\x71\x1d\xa3\xd3\x8f\x27\x91\x7e\x69\xb6\xcf\xe9\xe2\x93\x9c\x39\x41\xda\xde\xfe\x1a\xdc\x9f\x40\xfb\xad\x7a\x51\x92\x0a\x3c\xdf\xaa\x2a\x5d\x2b\x10\x76\x7b\xcd\xe7\x65\x96\x44\x2b\x37\x0f\x1a\x6e\x85\xa6\x3f\x1d\x7b\x5e\x8a\xe5\x3c\x2a\xaa\xb5\x8a\x56\x8f\x61\xa0\x11\xc6\x77\x2e\xff\x4f\x2e\xe9\xad\xf2\xb9\x23\xc6\xad\xfb\xfb\xf8\xd4\x33\xbd\x7e\x21\xc5\x7e\x3a\xfd\xb7\x04\xab\x5a\xe2\x3c\x21\x6e\x63\xe2\xca\x10\xd7\x0d\x71\x1a\x11\xc7\x11\x71\xd3\x11\x9b\x52\xc8\x03\x10\xd7\x95\x80\x3d\x05\x21\x33\xe2\xce\x10\xc7\x29\x71\x13\xc9\xb3\xca\x84\x1c\x20\x54\x07\xd0\x37\x62\xdb\x96\xc4\x45\x46\x5c\xd6\xc4\x26\x25\x2e\x6a\xbf\xa7\x20\x8e\x1b\xf9\x96\x36\xc4\xda\xfb\x31\x9e\xb0\x49\x44\xac\x73\xe2\xa6\x22\x2e\x72\xe2\xae\x11\x9f\x88\xa3\x2d\x25\xd6\xba\x26\x4e\x4b\xd9\x93\x7a\xfb\xf8\xde\x65\x5e\x28\x72\x21\x56\x5d\xc8\xb8\x36\xc4\x4d\x4b\xdc\x95\x92\x9f\xcd\x25\x96\xce\x12\x47\x31\xb1\xae\x24\xf6\x0c\xa2\xa2\x89\x73\xc4\x53\x8b\xc8\x58\x4d\x6c\x0b\xe2\x22\x91\x98\x1a\xe3\x45\x48\x13\xc7\x20\x7d\x2a\x82\xd1\x58\x2f\x26\x91\xd4\x00\x39\x61\x4d\x6a\x88\x2b\xc4\x94\x7a\x41\xf2\x42\xa3\xad\xd8\xc9\x51\x8b\x88\x38\xb3\xe2\xd7\x76\xc4\x71\x27\xc2\x05\xe1\x73\x35\xd3\xb2\xdf\xa0\xfe\x29\x71\x8c\xda\x69\xf1\x59\xa0\xee\x11\x71\x5e\x12\x97\x91\x88\x16\x6a\x5f\xa1\xb7\x85\xd4\x22\xed\x88\xf3\x4a\x7e\x75\x29\x39\x66\x9d\xef\x5f\x24\x42\x9a\xfa\x9a\xe8\x42\x84\xce\xc4\xc4\x75\x4c\x1c\xa3\xe6\x56\xd6\x5a\x43\x1c\xb5\x32\xb6\x91\xf4\xd6\xb6\x52\x47\xec\x35\x89\x88\x60\x95\x12\x97\x8d\x88\x68\x64\x24\x8f\x34\x26\x6e\x2b\x11\xdf\xb2\x90\x27\xb0\xaa\x5b\xe2\xa8\x10\x1c\x56\x56\x7a\x8e\xde\xc1\xbf\x31\xde\x4f\x2c\xa2\x8a\xf5\x69\x4b\x5c\x6a\xc1\x08\xb0\x61\xbc\xd8\xbb\x27\x70\x7b\x39\x1c\x6a\xc1\x34\xfc\x23\x37\xc4\x8e\x6f\x58\xd7\xe5\xe2\x17\xb5\x89\x2b\x39\x50\x72\x23\xbf\xa2\xf2\x7c\xf0\x5c\x42\x7d\xd0\x13\xc7\x0b\xeb\x71\x59\x08\x8f\x74\x49\xac\x8d\xd4\x14\x38\x46\x1d\xd1\x3b\xc7\x05\xe0\x25\x13\x9f\xc0\x3b\x7a\xdd\xf9\x1e\xe8\xcc\xd7\x06\xf6\x10\x93\xe7\x43\xe7\xf9\x07\x7c\xb8\x1e\xa1\x87\xe8\x9d\x95\x35\x0e\x47\x91\xd4\x29\xcd\x24\x37\x70\x0f\xdf\xd1\xb3\xa4\x96\x3a\x23\xc6\xc8\xe3\xbc\x68\x84\x67\x49\x4a\xac\x63\x39\xe8\x70\x80\xb9\xfa\x23\x5f\xdf\x2b\xf8\x76\x78\x41\x7f\x23\xc9\xb1\xf2\x73\xa9\x8f\x09\x5c\x6b\x71\x58\x95\xa2\x09\xa8\x0f\xd6\x43\x17\x92\x82\xb8\xd3\x72\xc0\x3a\x5e\x81\x9f\x9d\xac\x7b\xe2\x15\x0e\xd3\x5c\xd6\x02\x47\xb1\xef\x6f\x9d\x49\x3e\xe8\x3d\xe2\x86\x8e\xd9\x0b\x67\x73\xe1\x15\xf2\x2e\x8c\xe4\x08\x4e\x03\xf7\xc0\x3f\x72\x04\x27\xa0\x65\x16\x18\x8d\x05\x87\xe0\x00\x7a\x8c\x1e\x35\xb1\xe7\x69\x23\xf9\xd4\xad\xe0\x40\x43\x23\x52\xd1\x97\xb2\x14\x7c\x76\x5e\x1f\x51\x2b\x13\xc9\x37\xec\x83\x06\x00\xf7\xc0\x2a\xe6\xb0\x0e\x7e\x61\xc3\x54\x52\x73\x87\x2d\x2d\xb9\xb9\x43\xbe\x95\x9a\x39\x5c\xb4\x52\x2f\xf8\x76\xdc\x2b\x24\xc7\x42\x0b\xa6\xa1\xcd\xc0\x2f\x78\xe6\xf6\xe2\xf2\x51\x8b\x7e\x00\x7f\xa8\x2b\x62\x44\x6d\xb2\x52\x30\x0e\xec\x02\x47\xb6\x26\x8e\xe3\xdf\x5e\x34\x74\x2d\xdc\x83\xbe\x01\x67\x2d\x2e\x24\xe9\x7f\x70\xd1\x70\x47\xcc\x1f\x79\xcd\x70\x06\x9f\xb9\x64\xc8\xff\xa6\x2f\xbd\x62\x38\x8b\xff\xdb\x05\xe3\x3a\xcb\xff\xff\xf5\xe2\x92\x9e\xbf\x5c\xd4\x45\xb2\x56\x87\x7f\x05\x00\x00\xff\xff\xd5\xba\x2c\x75\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1536755191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1536754952_initial_schema.down.sql": _1536754952_initial_schemaDownSql,
	"1536754952_initial_schema.up.sql": _1536754952_initial_schemaUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1536754952_initial_schema.down.sql": &bintree{_1536754952_initial_schemaDownSql, map[string]*bintree{}},
	"1536754952_initial_schema.up.sql": &bintree{_1536754952_initial_schemaUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

